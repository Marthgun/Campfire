<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" 
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article lang="en">
<articleinfo>
  <title>API Reference</title>
</articleinfo>
<section>
<title>
Form/CampUtil</title>
<formalpara><title>SCRIPTNAME</title><para></para></formalpara>
<literallayout class="monospaced">
scriptname CampUtil hidden
</literallayout>
<formalpara><title>OVERVIEW</title><para></para></formalpara>
<para>
 The `CampUtil` script is the primary way most mods should interact with Campfire and contains many helpful functions. To call any of the following functions, download the SDK and in your script include the line:
 &lt;pre&gt;import CampUtil&lt;/pre&gt;
 Alternatively, you can call `CampUtil.FunctionName()` without importing CampUtil. }
</para>
</section>
<section>
<title>
CampUtil/GetAPIVersion</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Get the <link linkend="robo0">CampUtil</link> API version number.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
float function GetAPIVersion() global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 The <link linkend="robo0">CampUtil</link> API version number. This is NOT the same thing as the version number of Campfire.
 <link linkend="robo0">CampUtil</link>'s version number will increment only when changes have been made to the API itself.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
float ver = <link linkend="robo0">CampUtil</link>.GetAPIVersion()
</literallayout>
</section>
<section>
<title>
CampUtil/GetCampfireVersion</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Get the Campfire mod version number.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 2
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
float function GetCampfireVersion() global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 The Campfire version number.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
float ver = <link linkend="robo0">CampUtil</link>.GetCampfireVersion()
</literallayout>
</section>
<section>
<title>
CampUtil/GetPlayerEquippedHead</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Gets the player's currently equipped head armor.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
Armor function GetPlayerEquippedHead() global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 The player's currently equipped head armor.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
Armor PlayerHelm = GetPlayerEquippedHead()
</literallayout>
</section>
<section>
<title>
CampUtil/GetPlayerEquippedBody</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Gets the player's currently equipped body armor.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
Armor function GetPlayerEquippedBody() global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 The player's currently equipped body armor.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
Armor PlayerArmor = GetPlayerEquippedBody()
</literallayout>
</section>
<section>
<title>
CampUtil/GetPlayerEquippedHands</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Gets the player's currently equipped hand armor.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
Armor function GetPlayerEquippedHands() global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 The player's currently equipped hand armor.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
Armor PlayerGauntlets = GetPlayerEquippedHands()
</literallayout>
</section>
<section>
<title>
CampUtil/GetPlayerEquippedFeet</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Gets the player's currently equipped foot armor.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
Armor function GetPlayerEquippedFeet() global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 The player's currently equipped foot armor.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
Armor PlayerBoots = GetPlayerEquippedFeet()
</literallayout>
</section>
<section>
<title>
CampUtil/GetPlayerEquippedBackpack</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Gets the player's currently equipped backpack.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
Armor function GetPlayerEquippedBackpack() global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 The player's currently equipped backpack.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
Armor PlayerBackpack = GetPlayerEquippedBackpack()
</literallayout>
<formalpara><title>NOTES</title><para></para></formalpara>
<para>
       An Armor item is considered to be a backpack if it is in the _Camp_Backpacks FormList.
</para>
</section>
<section>
<title>
CampUtil/GetPlayerEquippedAmmo</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Gets the player's currently equipped ammo.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
Ammo function GetPlayerEquippedAmmo() global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 The player's currently equipped ammo.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
Armor PlayerArrows = GetPlayerEquippedAmmo()
</literallayout>
</section>
<section>
<title>
CampUtil/IsRefInInterior</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Whether or not the reference is in an interior cell, or a cell that "looks like" an interior.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
bool function IsRefInInterior(ObjectReference akReference) global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<itemizedlist><listitem><para> akReference: The object reference to check.
</para></listitem></itemizedlist><para>
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 True if the reference is in an interior or "interior-like" cell, false otherwise.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
;Is the box in an interior?
if IsRefInInterior(Box)
        Debug.Trace("Box is inside!")
endif
</literallayout>
<formalpara><title>NOTES</title><para></para></formalpara>
<para>
 The standard IsInInterior() function can only return whether or not the current cell 
 is marked as an Interior. There are numerous worldspaces (such as AlftandWorld, 
 Blackreach, BlindCliffCaveWorld, etc) that look and act like interiors, but are set 
 as external worldspaces. This can cause IsInInterior() to return undesirable results.
 This function takes these known base game (and DLC) worldspaces into account when
 evaluating the object reference's location.
</para>
</section>
<section>
<title>
CampUtil/GetTrackedFollower</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Returns the tracked follower at the specified index.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
Actor function GetTrackedFollower(int aiIndex) global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<itemizedlist><listitem><para> aiIndex: The index (1 - 3) to check. Returns None if index is out of range or there
</para></listitem></itemizedlist><para>
 is no follower filling the specified index.
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 The Actor occupying this index, or None if no tracked follower in this index.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
int i = 1
while i &lt; 4
        debug.trace("Follower " + i + " is " + <link linkend="robo0">CampUtil</link>.GetTrackedFollower(i))
        i += 1
endWhile
</literallayout>
</section>
<section>
<title>
CampUtil/IsTrackedFollower</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Whether or not this actor is a tracked follower.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
bool function IsTrackedFollower(Actor akActor) global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<itemizedlist><listitem><para> akActor: The actor to check.
</para></listitem></itemizedlist><para>
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 True if this actor is a tracked follower; false if not.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
if <link linkend="robo0">CampUtil</link>.IsTrackedFollower(myActor)
        debug.trace(myActor + " is a follower!")
endif
</literallayout>
</section>
<section>
<title>
CampUtil/GetTrackedFollowerCount</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Return the number of tracked followers.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
int function GetTrackedFollowerCount() global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 The number of followers currently being tracked, from 0 to 3.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
debug.trace("I have " + <link linkend="robo0">CampUtil</link>.GetTrackedFollowerCount() + " followers.")
</literallayout>
</section>
<section>
<title>
CampUtil/GetTrackedAnimal</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Returns the tracked animal in the player's service.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
Actor function GetTrackedAnimal() global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 The tracked animal Actor currently in the player's service, or None if no animal
 currently following the player.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
debug.trace("My dog is " + <link linkend="robo0">CampUtil</link>.GetTrackedAnimal())
</literallayout>
</section>
<section>
<title>
CampUtil/IsTrackedAnimal</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Whether or not the Actor is a tracked animal.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
bool function IsTrackedAnimal(Actor akActor) global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 True if the Actor is a tracked animal; False if not.
</para>
</section>
<section>
<title>
CampUtil/GetTrackedAnimalCount</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Get the number of animals currently in the player's service.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
int function GetTrackedAnimalCount() global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 The number of animals currently being tracked, from 0 to 1.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
debug.trace("I have " + <link linkend="robo0">CampUtil</link>.GetTrackedAnimalCount() + " doggies.")
</literallayout>
</section>
<section>
<title>
CampUtil/PlayerCanPlaceObjects</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Whether or not the player can currently place Placeable Objects (tents, etc).
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
bool function PlayerCanPlaceObjects(bool abShowMessage = true, bool abPlayerBusyCheck = true) global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<itemizedlist><listitem><para> abShowMessage: Whether to show an informative message detailing why the player can't place a Placeable Object right now if returning false.
</para></listitem><listitem><para> abPlayerBusyCheck: Whether or not to check if the player is already placing an object.
</para></listitem></itemizedlist><para>
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 True if the player can currently place Placeable Objects, false otherwise.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
        if PlayerCanPlaceObjects()
                debug.trace("The player can place objects!")
        endif
</literallayout>
<formalpara><title>NOTES</title><para></para></formalpara>
<para>
 Reasons that this function might return false are:
</para>
<itemizedlist><listitem><para> The player is already trying to place something.
</para></listitem><listitem><para> The player is swimming.
</para></listitem><listitem><para> The player is mounted.
</para></listitem><listitem><para> The player is sleeping.
</para></listitem><listitem><para> The player is sitting down.
</para></listitem><listitem><para> The player is using another object (crafting bench, etc).
</para></listitem><listitem><para> The player is currently transformed into a Vampire Lord or Werewolf.
</para></listitem></itemizedlist><para>
</para>
</section>
<section>
<title>
CampUtil/IsPlayerPlacingObject</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Whether or not the player is currently placing a Placeable Object (tent, etc).
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
bool function IsPlayerPlacingObject() global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 True if the player is currently placing a Placeable Object, false otherwise.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
if IsPlayerPlacingObject()
        debug.trace("The player is placing an object right now!")
endif
</literallayout>
</section>
<section>
<title>
CampUtil/LegalToCampHere</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Whether or not the player's current location is considered a legal camping area.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
bool function LegalToCampHere(bool abIgnoreSetting = false) global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<itemizedlist><listitem><para> abIgnoreSetting: Whether or not to ignore Campfire's "Camping Illegal in Settled Areas" setting. If true, returns the legality of the player's current position regardless of the setting.
</para></listitem></itemizedlist><para>
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 True if player's location is a legal camping area; false otherwise.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
if !LegalToCampHere()
        debug.trace("We can't stop here. This is bat country.")
endif
</literallayout>
<formalpara><title>NOTES</title><para></para></formalpara>
<para>
 In Campfire, it is illegal for the player to place Placeable Objects inside houses, other owned buildings (inns, taverns), and within range of / inside settled areas like towns and cities.
</para>
</section>
<section>
<title>
CampUtil/GetAreaCampingFaction</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Returns the faction that dictates camping legality in this area.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
Faction function GetAreaCampingFaction(ObjectReference akCenter) global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 akCenter: The object whose surroundings to check.
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 If akCenter is in an illegal camping area, returns the faction responsible for making it illegal, else, returns None.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
Faction property MyCoolFaction auto
if GetAreaCampingFaction() == MyCoolFaction
        debug.trace("MyCoolFaction are a bunch of facists for not letting me camp here!")
endif
</literallayout>
</section>
<section>
<title>
CampUtil/GetLastUsedCampfire</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Returns the last campfire used by the player.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
ObjectReference function GetLastUsedCampfire() global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 The last campfire used by the player, or None if it no longer exists.
</para>
</section>
<section>
<title>
CampUtil/GetCurrentTent</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Returns the current tent being used.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
ObjectReference function GetCurrentTent() global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 The current tent being used, or None if the player is not using a tent.
</para>
</section>
<section>
<title>
CampUtil/IsTentWaterproof</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Is this tent waterproof?
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
bool function IsTentWaterproof(ObjectReference akTent) global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 akTent: The Tent ObjectReference to check. Use the return value of <link linkend="robo21">GetCurrentTent</link>(), or use <link linkend="robo24">IsCurrentTentWaterproof</link>() instead.
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 True if the tent is flagged as being waterproof, or false if not.
</para>
</section>
<section>
<title>
CampUtil/IsTentWarm</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Is this tent warm?
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
bool function IsTentWarm(ObjectReference akTent) global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 akTent: The Tent ObjectReference to check. Use the return value of <link linkend="robo21">GetCurrentTent</link>(), or use <link linkend="robo25">IsCurrentTentWarm</link>() instead.
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 True if the tent is flagged as being warm, or false if not.
</para>
</section>
<section>
<title>
CampUtil/IsCurrentTentWaterproof</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Is the current tent waterproof?
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 2
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
bool function IsCurrentTentWaterproof() global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 True if the current tent is flagged as being waterproof, or false if not or if there is no tent in use by the player.
</para>
</section>
<section>
<title>
CampUtil/IsCurrentTentWarm</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Is the current tent warm?
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 2
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
bool function IsCurrentTentWarm() global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 True if the current tent is flagged as being warm, or false if not or if there is no tent in use by the player.
</para>
</section>
<section>
<title>
CampUtil/IsCrimeToPlaceInTowns</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Is it a crime to place this base object in towns, inside owned houses, etc?
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 1
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
bool function IsCrimeToPlaceInTowns(Form akBaseObject) global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 akBaseObject: The base object to check.
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 True if the Form is illegal to place in settled areas, or False if not.
</para>
<formalpara><title>NOTES</title><para></para></formalpara>
<para>
 This function returns true or false without regard to the current legality setting.
</para>
</section>
<section>
<title>
CampUtil/IsPlaceableObjectTemporary</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Returns whether or not this placeable object does not spawn persistently (i.e. won't be cleaned up by a cell reset).
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 2
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
bool function IsPlaceableObjectTemporary(Form akBaseObject) global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 akBaseObject: The base object to check.
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 True if the Form will spawn non-persistently, False if not.
</para>
</section>
<section>
<title>
CampUtil/GetCampfireSettingBool</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Returns the state of the given Campfire setting.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 2
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
bool function GetCampfireSettingBool(string setting) global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 setting: The setting which you would like to retrieve. Accepted values (case-sensitive):
</para>
<itemizedlist><listitem><para> ManualFireLighting
</para></listitem><listitem><para> CampingGearFlammable
</para></listitem><listitem><para> TentRemovePlayerEquipment   ; The master setting for whether or not to remove player gear in tents
</para></listitem><listitem><para> TentRemovePlayerCuirass
</para></listitem><listitem><para> TentRemovePlayerHelm
</para></listitem><listitem><para> TentRemovePlayerGauntlets
</para></listitem><listitem><para> TentRemovePlayerBoots
</para></listitem><listitem><para> TentRemovePlayerBackpack
</para></listitem><listitem><para> TentRemovePlayerWeapons
</para></listitem><listitem><para> TentRemovePlayerShield
</para></listitem><listitem><para> TentRemovePlayerAmmo
</para></listitem><listitem><para> TentRemoveFollowerEquipment
</para></listitem><listitem><para> FollowerTracking
</para></listitem><listitem><para> FollowersUseCampsite
</para></listitem><listitem><para> CampingIllegalInTowns
</para></listitem><listitem><para> AdvancedPlacementMode
</para></listitem><listitem><para> EquippingOverhaulCompatibility
</para></listitem></itemizedlist><para>
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 True if the feature is enabled, false if disabled or if the setting string is invalid.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
if GetCampfireSettingBool("FollowerTracking") == true
        debug.trace("Campfire is tracking followers.")
endif
</literallayout>
</section>
<section>
<title>
CampUtil/GetCampfireSettingInt</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 Returns the value of the given Campfire setting.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 2
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
int function GetCampfireSettingInt(string setting) global
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 setting: The setting which you would like to retrieve. Accepted values (case-sensitive):
</para>
<itemizedlist><listitem><para> MaxPlacementThreads
</para></listitem></itemizedlist><para>
</para>
<formalpara><title>RETURN VALUE</title><para></para></formalpara>
<para>
 The value of the setting, or -1 if the setting string was invalid.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
if GetCampfireSettingInt("MaxPlacementThreads") &gt; 5
        debug.trace("Campfire is configured to use over 5 threads for placing objects.")
endif
</literallayout>
</section>
<section>
<title>
CampUtil/Campfire_OnObjectPlaced</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 An SKSE Mod Event that fires when the player places any Campfire placeable object (tents, containers, furniture, etc).
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 2
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
Event Campfire_OnObjectPlaced(Form akPlacedObject, float afPositionX, float afPositionY, float afPositionZ, float afAngleX, float afAngleY, float afAngleZ, bool abIsTent)
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 akPlacedObject: The ObjectReference that was placed. Cast to an ObjectReference (i.e. akPlacedObject as ObjectReference).
 afXPos: The X position of the object.
 afYPos: The Y position of the object.
 afZPos: The Z position of the object.
 afXAng: The X angle of the object.
 afYAng: The Y angle of the object.
 afZAng: The Z angle of the object.
 abIsTent: Whether or not this object is a Campfire-based tent.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
Event OnInit()
    RegisterForModEvent("Campfire_OnObjectPlaced", "Campfire_OnObjectPlaced")
endEvent

Event Campfire_OnObjectPlaced(Form akPlacedObject, float afPositionX, float afPositionY, float afPositionZ, float afAngleX, float afAngleY, float afAngleZ, bool abIsTent)
        if abIsTent
                debug.trace("The player just placed a tent!")
        endif
endEvent
</literallayout>
<formalpara><title>NOTES</title><para></para></formalpara>
<para>
 This event will also be sent when a Campfire Perk Tree is displayed.
</para>
</section>
<section>
<title>
CampUtil/Campfire_OnObjectRemoved</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 An SKSE Mod Event that fires when the player picks up any Campfire placeable object (tents, containers, furniture, etc), or if that object is destroyed by fire.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 2
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
Event Campfire_OnObjectRemoved(Form akBaseObject, float afPositionX, float afPositionY, float afPositionZ, float afAngleX, float afAngleY, float afAngleZ, bool abIsTent)
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 akPlacedObject: The base object of the object that was removed.
 afPositionX: The X position of the object.
 afPositionY: The Y position of the object.
 afPositionZ: The Z position of the object.
 afAngleX: The X angle of the object.
 afAngleY: The Y angle of the object.
 afAngleZ: The Z angle of the object.
 abIsTent: Whether or not this object is a Campfire-based tent.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
Event OnInit()
    RegisterForModEvent("Campfire_OnObjectRemoved", "Campfire_OnObjectRemoved")
endEvent

Event Campfire_OnObjectRemoved(Form akBaseObject, float afPositionX, float afPositionY, float afPositionZ, float afAngleX, float afAngleY, float afAngleZ, bool abIsTent)
        if abIsTent
                debug.trace("The player just placed a tent!")
        endif
endEvent
</literallayout>
<formalpara><title>NOTES</title><para></para></formalpara>
<para>
 This event does not send the object reference of the object picked up as a parameter because, by the time this event is sent, the reference no longer exists.
 This event will also be sent when a Campfire Perk Tree is exited. 
</para>
</section>
<section>
<title>
CampUtil/Campfire_OnBedrollSitLay</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 An SKSE Mod Event that fires when the player sits down, lies down, or gets up from sitting or laying in a Campfire tent or bed roll.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 2
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
Event Campfire_OnBedrollSitLay(Form akTent, bool abGettingUp)
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 akTent: The tent the player is sitting on, laying on, or getting up from. Cast to an ObjectReference (i.e. akTent as ObjectReference).
 abGettingUp: Whether or not the player is getting up from this tent or bed roll.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
Event OnInit()
    RegisterForModEvent("Campfire_OnBedrollSitLay", "Campfire_OnBedrollSitLay")
endEvent

Event Campfire_OnBedrollSitLay(Form akTent, bool abGettingUp)
        if abGettingUp
                debug.trace("The player just got up!")
        endif
endEvent
</literallayout>
</section>
<section>
<title>
CampUtil/Campfire_OnTentEnter</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 An SKSE Mod Event that fires when the player "enters" a tent.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 2
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
Event Campfire_OnTentEnter(Form akTent, bool abHasShelter)
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 akTent: The tent the player just "entered". Cast to an ObjectReference (i.e. akTent as ObjectReference).
 abHasShelter: Whether or not the tent the player entered has overhead shelter of some kind.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
Event OnInit()
    RegisterForModEvent("Campfire_OnTentEnter", "Campfire_OnTentEnter")
endEvent

Event Campfire_OnTentEnter(Form akTent, bool abHasShelter)
        if abHasShelter
                debug.trace("It's going to be a cold night...")
        endif
endEvent
</literallayout>
<formalpara><title>NOTES</title><para></para></formalpara>
<para>
 For some tents created with the Campfire Dev Kit, this event may not fire as soon as the player physically enters the tent. It will instead be sent when the player sits or lies down on their bed roll. (Reason: <link linkend="robo89">TentAsset_LargeTentTriggerVolume</link> has not been set.)
</para>
</section>
<section>
<title>
CampUtil/Campfire_OnTentLeave</title>
<formalpara><title>DESCRIPTION</title><para></para></formalpara>
<para>
 An SKSE Mod Event that fires when the player "leaves" a tent.
</para>
<formalpara><title>API VERSION ADDED</title><para></para></formalpara>
<para>
 2
</para>
<formalpara><title>SYNTAX</title><para></para></formalpara>
<literallayout class="monospaced">
Event Campfire_OnTentLeave()
</literallayout>
<formalpara><title>PARAMETERS</title><para></para></formalpara>
<para>
 None.
</para>
<formalpara><title>EXAMPLES</title><para></para></formalpara>
<literallayout class="monospaced">
Event OnInit()
    RegisterForModEvent("Campfire_OnTentLeave", "Campfire_OnTentLeave")
endEvent

Event Campfire_OnTentLeave()
        debug.trace("Back to adventuring!")
endEvent
</literallayout>
<formalpara><title>NOTES</title><para></para></formalpara>
<para>
 This event may fire multiple times for the same tent. This can happen for a number of reasons, such as if the player is standing inside the tent when picking it up.
 For some tents created with the Campfire Dev Kit, this event may not fire as soon as the player physically enters the tent. It will instead be sent when the player gets up from sitting or lying down on their bed roll. (Reason: <link linkend="robo89">TentAsset_LargeTentTriggerVolume</link> has not been set.)
</para>
</section>
</article>
